kind: Deployment
apiVersion: apps/v1
metadata:
# set your lab user name
  name: {{ .Release.Name }}
spec:
  replicas: {{ .Values.ReplicaNumber }}
  selector:
    matchLabels: 
# set your lab user name
      app: {{ .Release.Name }}
  template: 
    metadata:
      annotations:
        rollme: {{ randAlphaNum 5 | quote }}
        checksum/config: {{ include (print $.Template.BasePath "/ConfigMap.yaml") . | sha256sum }}
      labels:
# set your lab user name
        app: {{ .Release.Name }}
    spec:
      volumes:
        - name: index-html
          configMap:
            name: index.html
            defaultMode: 420
      containers:
        - resources: {}
          env:
                      - name: PORT
                        value: {{ .Values.containers.containerPort | quote }}
          readinessProbe:
                    httpGet:
                      path: {{ .Values.probes.readiness.path }} # this check the application url path
                      port: {{ .Values.containers.containerPort  }} # In which port the Application is listening
                      scheme: HTTP
                    initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }} # the time is waiting befor testing the application path
                    timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }} # the time for timeout
                    periodSeconds: {{ .Values.probes.readiness.periodSeconds }} # the abount of time to wait between checks
                    successThreshold: {{ .Values.probes.readiness.successThreshold }} # count to decalre seccessfull 
                    failureThreshold: {{ .Values.probes.readiness.failureThreshold }} # count to decalre failur
          livenessProbe:
                      httpGet:
                        path: {{ .Values.probes.liveness.path }}
                        port: {{ .Values.containers.containerPort }}
                        scheme: HTTP
                      initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
                      timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
                      periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
                      successThreshold: {{ .Values.probes.liveness.successThreshold }}
                      failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
          volumeMounts:
              - name: index-html
                mountPath: /tmp/html # this will mount the html.index file to it application location
          terminationMessagePath: /dev/termination-log
          name: {{ .Release.Name }}
          ports:
            - containerPort: {{ .Values.containers.containerPort }}
              protocol: TCP
          imagePullPolicy: IfNotPresent
# update with the image you build in part 1
          image: {{ .Values.containers.image }}:{{ .Values.containers.tag }}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 10